c
APP.host_authorization
APP.permitted_hosts
r = get '/'
c
r = get '/'
c
APP.host_authorization
APP
r = get '/'
c
n
c
n
c
APP.environment=:production 
APP.environment
c
@ip_hosts
@ip_hosts.any?
s
@domain_hosts.any?
s
n
s
host 
s
n
request.host_authority
get_http_forwarded(:host)
n
c
n
s
c
n
c
get_http_forwarded(:host)
s
n
s
n
c
n
c
s
n
s
n
c
n
s
n
s
n
c
n
c
n
forwarded_host
n
forwarded_priority
s
n
s
c
request 
request.forwarded_authority
forwarded_host
n
origin_host
n
request 
n
c
request.forwarded_authority
forwarded_host
n
origin_host
n
request
n
env
n
s
n
s
n
s
n
s
n
s
n
s
env
s
n
s
env
n
s
n
s
c
s
c
env
n
s
params
env
uri
s
n
s
:default_host
s
c
s
c
@_rack_test_sessions
s
c
rack_test_session
s
    r = get '/', nil, {
      "HTTP_HOST" => "example.org",
      "action_dispatch.show_detailed_exceptions" => true
    }
header 'HTTP_HOST','localhost'
    r = get '/', nil, {
      "HTTP_HOST" => "example.org",
      "action_dispatch.show_detailed_exceptions" => true
    }
    r = get '/', env: {
      "HTTP_HOST" => "localhost",
      "action_dispatch.show_detailed_exceptions" => true
    }
    r = get '/', env: {
      "HTTP_HOST" => "example.org",
      "action_dispatch.show_detailed_exceptions" => true
    }
r = get '/'
  setup do
    Sinatra::Base.set :environment, :test
  end
    r = get '/', env: {
      "HOST" => "example.org",
      "action_dispatch.show_detailed_exceptions" => true
    }
current_session 
request.host_with_port
 request.host_with_port
    r = get '/', env: {
      "HOST" => "arjunrajappa",
      "action_dispatch.show_detailed_exceptions" => true
    }
require 'socket'
hostname = Socket.gethostname
variables
global_variables
local_variables
$$
$
APP.environment
APP.env
    r = get '/', env: {
      "HOST" => "127.0.0.1",
      "action_dispatch.show_detailed_exceptions" => true
    }
    r = get '/', env: {
      "HOST" => "localhost",
      "action_dispatch.show_detailed_exceptions" => true
    }
    r = get '/', env: {
      "HOST" => ".localhost",
      "action_dispatch.show_detailed_exceptions" => true
    }
get '/', { headers['HTTP_AUTH'] = "test" }
get '/', { headers['HTTP_AUTH'] = "test" 
get '/', { headers['HTTP_AUTH'] = "test"}
get '/' { headers['HTTP_AUTH'] = "test"}
get '/' {headers['HTTP_AUTH'] = "test"}
get '/' do 
get '/' do
get '/greet/:name'
p env
env
get
get '/'
APP.host_authorization
   r = get '/', env: {
    "HOST" => "localhost",
  "action_dispatch.show_detailed_exceptions" => true
  }
r
   r = get '/', env: {
   24:       "HOST" => "localhost",
   25:       "action_dispatch.show_detailed_exceptions" => true
   26:     }
get '/'
c
APP.host_authorization
APP.development?
APP.methods
APP
APP.permitted_hosts
app.permitted_hosts
c
r
n
c
r = get '/'
c
get '/'
c
job.arguments
job.arguments.pop
job.arguments.last.has_key?(:instana_context)
job.arguments.append({instana_context:""})
job.arguments.last.has_key?(:instana_context)\
job.arguments.append("")
job.arguments.append[""]
job.arguments
self.methods
self.parents
self
self["class"]
self.class.module_parents
self.class.methods
self.class.ansistors
self.class
self.class.parents
self
self["wrapped"]
self.class
self
c
job.arguments
n
context
c
